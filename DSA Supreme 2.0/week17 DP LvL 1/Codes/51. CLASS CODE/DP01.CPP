/*
ðŸ“‚ What is Dynamic Programming?
This is a technique to solve the problem janha recursion ko improve kar diya gya hai.

ðŸ“‚ Where to Use Dynamic Programming?
a. jav same subproblems overlapping (Reapeating) ho rahi ho
b. Jab ek badi problem ka optimized solution depend karta ho ek chotti problem ke optimized solution par.

ðŸ“‚ The Code Help Headline for DP:
Ek bar me problem ko solve karta hu fir use dovara solve nahi karta hu kyunki solved problem ka ans me store kar leta hu.

ðŸ“‚ Three Approaches for DP:
	I. Top Down Approach (Memoization)
	II. Bottom-up Approach (Tabulation)
	III. Patterns Approach (Space Optimization)

I. Top Down Approach (Memoization)
Yanha hum recursion and memoization ka use krte hai with three steps as
Step 1: create DP array
Step 2: store ans and return ans using DP array
Step 3: if ans already exist then return ans

II. Bottom-up Approach (Tabulation Method)
Yanha hum iterative approach ka use krte hai naki recursion ka with three steps as
Step 1: create DP array
Step 2: fill initial data in DP array according to recursion base case
Step 3: fill the remaining DP array according to recursion formula/logic

III. Patterns Approach (Space Optimization)
Yanha space optimization karte hai according jab koi pattern ban rha ho

ðŸ“‚ What is 1DP and 2DP?

1DP (One Dynamic Programming):
This could mean a single dynamic programming approach or a one-dimensional dynamic programming array. 
In dynamic programming, a one-dimensional array is often used to store intermediate results to avoid 
redundant computations and improve the efficiency of an algorithm.

2DP (Two Dynamic Programming):
This likely refers to a two-dimensional dynamic programming approach, where a two-dimensional array 
is used to store intermediate results. This is common in problems where there are two varying parameters 
or dimensions that need to be considered in the dynamic programming solution.
*/